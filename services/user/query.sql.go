// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package main

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, display_name, email, provider)
VALUES (gen_random_uuid(), $1, $2, $3)
RETURNING id, display_name, email, provider, created_at, last_sign_in_at
`

type CreateUserParams struct {
	DisplayName sql.NullString
	Email       string
	Provider    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.DisplayName, arg.Email, arg.Provider)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.Provider,
		&i.CreatedAt,
		&i.LastSignInAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, display_name, email, provider, created_at, last_sign_in_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.Provider,
		&i.CreatedAt,
		&i.LastSignInAt,
	)
	return i, err
}
