// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (user_id, username, picture, diet)
VALUES ($1, $2, $3, $4)
RETURNING user_id, username, picture, diet
`

type CreateProfileParams struct {
	UserID   pgtype.UUID
	Username string
	Picture  pgtype.Text
	Diet     pgtype.Text
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.UserID,
		arg.Username,
		arg.Picture,
		arg.Diet,
	)
	var i Profile
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Picture,
		&i.Diet,
	)
	return i, err
}

const createSecurity = `-- name: CreateSecurity :one
INSERT INTO security (user_id, spoonacular_username, spoonacular_hash, spoonacular_password)
VALUES ($1, $2, $3, $4)
RETURNING user_id, spoonacular_username, spoonacular_hash, spoonacular_password
`

type CreateSecurityParams struct {
	UserID              pgtype.UUID
	SpoonacularUsername pgtype.Text
	SpoonacularHash     pgtype.Text
	SpoonacularPassword pgtype.Text
}

func (q *Queries) CreateSecurity(ctx context.Context, arg CreateSecurityParams) (Security, error) {
	row := q.db.QueryRow(ctx, createSecurity,
		arg.UserID,
		arg.SpoonacularUsername,
		arg.SpoonacularHash,
		arg.SpoonacularPassword,
	)
	var i Security
	err := row.Scan(
		&i.UserID,
		&i.SpoonacularUsername,
		&i.SpoonacularHash,
		&i.SpoonacularPassword,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, display_name, email, provider, created_at, last_sign_in_at)
VALUES (uuid_generate_v4(), $1, $2, $3, now(), now())
RETURNING id, display_name, email, provider, created_at, last_sign_in_at
`

type CreateUserParams struct {
	DisplayName string
	Email       string
	Provider    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.DisplayName, arg.Email, arg.Provider)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.Provider,
		&i.CreatedAt,
		&i.LastSignInAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, display_name, email, provider, created_at, last_sign_in_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Email,
		&i.Provider,
		&i.CreatedAt,
		&i.LastSignInAt,
	)
	return i, err
}
