// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSpoonCredential = `-- name: CreateSpoonCredential :one
INSERT INTO spoon_credential (user_id, username, password, hash)
VALUES ($1, $2, $3, $4)
RETURNING user_id, username, password, hash
`

type CreateSpoonCredentialParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Username string      `json:"username"`
	Password string      `json:"password"`
	Hash     string      `json:"hash"`
}

func (q *Queries) CreateSpoonCredential(ctx context.Context, arg CreateSpoonCredentialParams) (SpoonCredential, error) {
	row := q.db.QueryRow(ctx, createSpoonCredential,
		arg.UserID,
		arg.Username,
		arg.Password,
		arg.Hash,
	)
	var i SpoonCredential
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Hash,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, provider, picture, diet, calories, carbs, protein, fat)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, username, email, provider, picture, diet, calories, carbs, protein, fat, created_at, modified_at
`

type CreateUserParams struct {
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Provider string      `json:"provider"`
	Picture  pgtype.Text `json:"picture"`
	Diet     pgtype.Text `json:"diet"`
	Calories pgtype.Int4 `json:"calories"`
	Carbs    pgtype.Int4 `json:"carbs"`
	Protein  pgtype.Int4 `json:"protein"`
	Fat      pgtype.Int4 `json:"fat"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Provider,
		arg.Picture,
		arg.Diet,
		arg.Calories,
		arg.Carbs,
		arg.Protein,
		arg.Fat,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.Picture,
		&i.Diet,
		&i.Calories,
		&i.Carbs,
		&i.Protein,
		&i.Fat,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, provider, picture, diet, calories, carbs, protein, fat, created_at, modified_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.Picture,
		&i.Diet,
		&i.Calories,
		&i.Carbs,
		&i.Protein,
		&i.Fat,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserIdByEmail = `-- name: GetUserIdByEmail :one
SELECT id FROM users WHERE email = $1
`

func (q *Queries) GetUserIdByEmail(ctx context.Context, email string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserIdByEmail, email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
